#!/bin/sh
# NOTES
# * The volume plot x-axis is time, not iteration number, so it makes sense
#   that the average does not extend all the way to the shortest data line.
set -eu

# Usage: get_column_index FILE COLUMN
get_column_index() {
	awk '
		BEGIN { FS = "\t" }
		NR == 1 {
			for (i = 1; i <= NF; i++) {
				if ($i == "'"$2"'") {
					print i
				}
			}
		}
	' "$1"
}

# Usage: get_average_data LOGFILE...
get_average_data() {
	# Sort the lines of all files so that lines for the same frame are
	# groupped together.
	sort -n "$@" | awk '
		function print_frame_data(frame, data_sum) {
			printf "%d", frame
			for (i in data_sum) { printf "\t%f", data_sum[i]/'"$#"' }
			printf "\n"
		}
		# Print the first header line found and ignore the rest
		/^[^[:digit:]]/ { if (!header) { print; header = 1 } }
		/^[[:digit:]]/ {
			# We have found data for a new frame, print the
			# previous frame data. prev_frame is initialized to 0
			# so this is not entered at first.
			if (prev_frame != $1) {
				# Exit if not all files had data for the previous frame.
				if (n != '"$#"') { exit 0 }
				# Print the averaged data of the previous frame.
				print_frame_data(prev_frame, s)
				# Reset the data for the new frame.
				for (i in s) { s[i] = 0 } n = 0
			}
			# Accumulate the data except the frame number and count
			# how many files have data for this frame.
			for (i = 2; i <= NF; i++) { s[i] += $i } n++
			prev_frame = $1
		}
		END {
			# Exit if not all files had data for the previous frame.
			if (n != '"$#"') { exit 0 }
			# Print the averaged data of the previous frame.
			print_frame_data(prev_frame, s)
		}'
}

plot_data() {
	data_files=""
	planning_files=""
	# Iterate over each log directory.
	while [ "$#" -gt 0 ]; do
		data_files="$data_files	$1/stats_fusion.tsv"
		planning_files="$planning_files	$1/stats_planning.tsv"
		shift
	done
	# Average all runs
	average_data_file=$(mktemp) || exit 1
	get_average_data $data_files > "$average_data_file"
	average_planning_file=$(mktemp) || exit 1
	get_average_data $planning_files > "$average_planning_file"
	# Get the indices of the required columns.
	frame_idx=$(get_column_index "$average_data_file" 'Frame')
	stamp_idx=$(get_column_index "$average_data_file" 'Timestamp')
	pre_idx=$(get_column_index "$average_data_file" 'Preprocessing')
	obj_int_idx=$(get_column_index "$average_data_file" 'Object integration')
	free_idx=$(get_column_index "$average_data_file" 'Free volume')
	occ_idx=$(get_column_index "$average_data_file" 'Occupied volume')
	expl_idx=$(get_column_index "$average_data_file" 'Explored volume')
	plan_idx=$(get_column_index "$average_planning_file" 'Planning iteration')
	plan_stamp_idx=$(get_column_index "$average_planning_file" 'Timestamp')
	plan_time_idx=$(get_column_index "$average_planning_file" 'Planning time')

	# Plot the data.
	gnuplot -p -e "
	$save_command
	data_files = \"$data_files\";
	planning_files = \"$planning_files\";
	set grid;
	set style data lines;
	set multiplot layout 2,2;

	set key right bottom;
	set xlabel 'Time (s)';
	set ylabel 'Volume (m³)';
	plot for [f in data_files] f using $stamp_idx:$free_idx notitle linetype rgb 'blue' dashtype \".\",\
		for [f in data_files] f using $stamp_idx:$occ_idx notitle linetype rgb 'red' dashtype \".\",\
		for [f in data_files] f using $stamp_idx:$expl_idx notitle linetype rgb 'green' dashtype \".\",\
		'$average_data_file' using $stamp_idx:$free_idx title 'Free' linetype rgb 'blue' linewidth 3,\
		'$average_data_file' using $stamp_idx:$occ_idx title 'Occupied' linetype rgb 'red' linewidth 3,\
		'$average_data_file' using $stamp_idx:$expl_idx title 'Explored' linetype rgb 'green' linewidth 3,;

	set key right bottom;
	set xlabel 'Frame';
	set ylabel 'Volume (m³)';
	plot for [f in data_files] f using (\$$frame_idx+1):$free_idx notitle linetype rgb 'blue' dashtype \".\",\
		for [f in data_files] f using (\$$frame_idx+1):$occ_idx notitle linetype rgb 'red' dashtype \".\",\
		for [f in data_files] f using (\$$frame_idx+1):$expl_idx notitle linetype rgb 'green' dashtype \".\",\
		'$average_data_file' using (\$$frame_idx+1):$free_idx title 'Free' linetype rgb 'blue' linewidth 3,\
		'$average_data_file' using (\$$frame_idx+1):$occ_idx title 'Occupied' linetype rgb 'red' linewidth 3,\
		'$average_data_file' using (\$$frame_idx+1):$expl_idx title 'Explored' linetype rgb 'green' linewidth 3,;


	set xlabel 'Planning iteration';
	set ylabel 'Planning time (s)';
	plot for [f in planning_files] f using (\$$plan_idx+1):$plan_time_idx notitle linetype rgb 'blue' dashtype \".\",\
		'$average_planning_file' using (\$$plan_idx+1):$plan_time_idx notitle linetype rgb 'blue' linewidth 3;

	set key left top;
	set xlabel 'Frame';
	set ylabel 'Frame time (s)';
	plot for [i=$pre_idx:$obj_int_idx:1] \
		'$average_data_file' using (\$$frame_idx+1):(sum [col=i:$obj_int_idx] column(col)) title columnheader(i) with filledcurves x1;

	unset multiplot;"

	if [ "$extra_plots" -eq 1 ]; then
		gnuplot -p -e "
		data_files = \"$data_files\";
		planning_files = \"$planning_files\";
		set grid;
		set style data lines;

		set key right top;
		set xlabel 'Time (s)';
		set ylabel 'Frame time (s)';
		plot for [i=$pre_idx:$obj_int_idx:1] \
			'$average_data_file' using $stamp_idx:(sum [col=i:$obj_int_idx] column(col)) title columnheader(i) with filledcurves x1,\
			'$average_planning_file' using $plan_stamp_idx:$plan_time_idx title 'Planning' with points linetype rgb 'red' linewidth 3;
		"
	fi

	# Remove temporary files.
	rm -f "$average_planning_file"
	rm -f "$average_data_file"
}

usage() {
	printf 'Usage: %s LOGDIR...\n' "${0##*/}"
	grep -E '[[:space:]].) #' "$0" | sed -e 's/) #//g' -e 's/^[ \t]*/  -/g'
}



# Parse command line options.
extra_plots=0
save_command=''
while getopts 'eo:h' opt_name; do
	case "$opt_name" in
		e) #      Display extra plots
			extra_plots=1
			;;
		o) # FILE Save to FILE instead of displaying
			save_command="set terminal png size 1920,1080; set output '$OPTARG';"
			;;
		h) #      Display this help message
			usage
			exit 0
			;;
		*)
			usage
			exit 1
			;;
	esac
done
shift "$((OPTIND - 1))"

case "$#" in
	0)
		usage
		exit 2
		;;
	*)
		plot_data "$@"
		;;
esac

