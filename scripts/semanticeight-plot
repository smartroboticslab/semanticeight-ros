#!/bin/sh
# NOTES
# * The volume plot x-axis is time, not iteration number, so it makes sense
#   that the average does not extend all the way to the shortest data line.
set -eu

usage() {
	printf 'Usage: %s TYPE LOGDIR...\n' "${0##*/}"
}

# Usage: get_column_index FILE COLUMN
get_column_index() {
	awk '
		BEGIN { FS = "\t" }
		NR == 1 {
			for (i = 1; i <= NF; i++) {
				if ($i == "'"$2"'") {
					print i
				}
			}
		}
	' "$1"
}

# Usage: get_average_data LOGFILE...
get_average_data() {
	# Sort the lines of all files so that lines for the same frame are
	# groupped together.
	sort -n "$@" | awk '
		function print_frame_data(frame, data_sum) {
			printf "%d", frame
			for (i in data_sum) { printf "\t%f", data_sum[i]/'"$#"' }
			printf "\n"
		}
		BEGIN { prev_frame = "none" }
		# Print the first header line found and ignore the rest
		/^[^[:digit:]]/ { if (!header) { print; header = 1 } }
		/^[[:digit:]]/ {
			# We have found data for a new frame, print the
			# previous frame data.
			if (prev_frame != $1 && prev_frame != "none") {
				# Exit if not all files had data for the previous frame.
				if (n != '"$#"') { exit 0 }
				# Print the averaged data of the previous frame.
				print_frame_data(prev_frame, s)
				# Reset the data for the new frame.
				for (i in s) { s[i] = 0 } n = 0
			}
			# Accumulate the data except the frame number and count
			# how many files have data for this frame.
			for (i = 2; i <= NF; i++) { s[i] += $i } n++
			prev_frame = $1
		}
		END {
			# Exit if not all files had data for the previous frame.
			if (n != '"$#"') { exit 0 }
			# Print the averaged data of the previous frame.
			print_frame_data(prev_frame, s)
		}'
}

# Usage: log_files LOGNAME LOGDIR...
log_files() {
	name="$1"
	shift
	find "$@" -name "$name" -type f | while read -r file
	do
		if [ "$(awk 'END { print NR }' "$file")" -gt 1 ]
		then
			# Only consider TSV files with at least one data line.
			printf '%s\n' "$file"
		fi
	done
}

# Usage: volume LOGDIR...
volume() {
	fusion_files=$(log_files 'stats_fusion.tsv' "$@")
	if [ -z "$fusion_files" ]
	then
		return
	fi
	# Average all runs.
	average_fusion_file=$(mktemp) || exit 1
	get_average_data $fusion_files > "$average_fusion_file"
	# Get the indices of the required columns.
	stamp_idx=$(get_column_index "$average_fusion_file" 'Timestamp')
	free_idx=$(get_column_index "$average_fusion_file" 'Free volume')
	occ_idx=$(get_column_index "$average_fusion_file" 'Occupied volume')
	expl_idx=$(get_column_index "$average_fusion_file" 'Explored volume')
	# Plot the data.
	gnuplot -p -e "
	$save_command
	set xlabel 'Time (s)';
	set ylabel 'Volume (m³)';
	set key right bottom;
	set grid;
	set style data lines;
	set xrange [$xmin:$xmax];
	set yrange [$ymin:$ymax];
	fusion_files = \"$fusion_files\";
	plot for [f in fusion_files] f using $stamp_idx:$free_idx notitle linetype rgb 'blue' dashtype \".\",\
		for [f in fusion_files] f using $stamp_idx:$occ_idx notitle linetype rgb 'red' dashtype \".\",\
		for [f in fusion_files] f using $stamp_idx:$expl_idx notitle linetype rgb 'green' dashtype \".\",\
		'$average_fusion_file' using $stamp_idx:$free_idx title 'Free' linetype rgb 'blue' linewidth 3,\
		'$average_fusion_file' using $stamp_idx:$occ_idx title 'Occupied' linetype rgb 'red' linewidth 3,\
		'$average_fusion_file' using $stamp_idx:$expl_idx title 'Explored' linetype rgb 'green' linewidth 3,;
	"
	# Remove temporary file.
	rm -f "$average_fusion_file"
}

# Usage: volume_frame LOGDIR...
volume_frame() {
	fusion_files=$(log_files 'stats_fusion.tsv' "$@")
	if [ -z "$fusion_files" ]
	then
		return
	fi
	# Average all runs.
	average_fusion_file=$(mktemp) || exit 1
	get_average_data $fusion_files > "$average_fusion_file"
	# Get the indices of the required columns.
	frame_idx=$(get_column_index "$average_fusion_file" 'Frame')
	free_idx=$(get_column_index "$average_fusion_file" 'Free volume')
	occ_idx=$(get_column_index "$average_fusion_file" 'Occupied volume')
	expl_idx=$(get_column_index "$average_fusion_file" 'Explored volume')
	# Plot the data.
	gnuplot -p -e "
	$save_command
	set xlabel 'Frame';
	set ylabel 'Volume (m³)';
	set key right bottom;
	set grid;
	set style data lines;
	set xrange [$xmin:$xmax];
	set yrange [$ymin:$ymax];
	fusion_files = \"$fusion_files\";
	plot for [f in fusion_files] f using (\$$frame_idx+1):$free_idx notitle linetype rgb 'blue' dashtype \".\",\
		for [f in fusion_files] f using (\$$frame_idx+1):$occ_idx notitle linetype rgb 'red' dashtype \".\",\
		for [f in fusion_files] f using (\$$frame_idx+1):$expl_idx notitle linetype rgb 'green' dashtype \".\",\
		'$average_fusion_file' using (\$$frame_idx+1):$free_idx title 'Free' linetype rgb 'blue' linewidth 3,\
		'$average_fusion_file' using (\$$frame_idx+1):$occ_idx title 'Occupied' linetype rgb 'red' linewidth 3,\
		'$average_fusion_file' using (\$$frame_idx+1):$expl_idx title 'Explored' linetype rgb 'green' linewidth 3,;
	"
	# Remove temporary file.
	rm -f "$average_fusion_file"
}

# Usage: frame_time LOGDIR...
frame_time() {
	fusion_files=$(log_files 'stats_fusion.tsv' "$@")
	if [ -z "$fusion_files" ]
	then
		return
	fi
	# Average all runs.
	average_fusion_file=$(mktemp) || exit 1
	get_average_data $fusion_files > "$average_fusion_file"
	# Get the indices of the required columns.
	frame_idx=$(get_column_index "$average_fusion_file" 'Frame')
	pre_idx=$(get_column_index "$average_fusion_file" 'Preprocessing')
	obj_int_idx=$(get_column_index "$average_fusion_file" 'Object integration')
	fusion_idx=$(get_column_index "$average_fusion_file" 'Total')
	# Plot the data.
	gnuplot -p -e "
	$save_command
	set xlabel 'Frame';
	set ylabel 'Frame time (s)';
	set key left top;
	set grid;
	set style data lines;
	set xrange [$xmin:$xmax];
	set yrange [$ymin:$ymax];
	fusion_files = \"$fusion_files\";
	plot for [i=$pre_idx:$obj_int_idx:1] \
		'$average_fusion_file' using (\$$frame_idx+1):(sum [col=i:$obj_int_idx] column(col)) title columnheader(i) with filledcurves x1,\
		'$average_fusion_file' using (\$$frame_idx+1):(\$$fusion_idx) title 'Total';
	"
	# Remove temporary file.
	rm -f "$average_fusion_file"
}

# Usage: planning_time LOGDIR...
planning_time() {
	planning_files=$(log_files 'stats_planning.tsv' "$@")
	if [ -z "$planning_files" ]
	then
		return
	fi
	# Average all runs.
	average_planning_file=$(mktemp) || exit 1
	get_average_data $planning_files > "$average_planning_file"
	# Get the indices of the required columns.
	plan_idx=$(get_column_index "$average_planning_file" 'Planning iteration')
	plan_time_idx=$(get_column_index "$average_planning_file" 'Planning time')
	# Plot the data.
	gnuplot -p -e "
	$save_command
	set xlabel 'Planning iteration';
	set ylabel 'Planning time (s)';
	set grid;
	set style data lines;
	set xrange [$xmin:$xmax];
	set yrange [$ymin:$ymax];
	planning_files = \"$planning_files\";
	plot for [f in planning_files] f using (\$$plan_idx+1):$plan_time_idx notitle linetype rgb 'blue' dashtype \".\",\
		'$average_planning_file' using (\$$plan_idx+1):$plan_time_idx notitle linetype rgb 'blue' linewidth 3;
	"
	# Remove temporary file.
	rm -f "$average_planning_file"
}

# Usage: frame_planning_time LOGDIR...
frame_planning_time() {
	fusion_files=$(log_files 'stats_fusion.tsv' "$@")
	planning_files=$(log_files 'stats_planning.tsv' "$@")
	if [ -z "$fusion_files" ] || [ -z "$planning_files" ]
	then
		return
	fi
	# Average all runs.
	average_fusion_file=$(mktemp) || exit 1
	get_average_data $fusion_files > "$average_fusion_file"
	average_planning_file=$(mktemp) || exit 1
	get_average_data $planning_files > "$average_planning_file"
	# Get the indices of the required columns.
	stamp_idx=$(get_column_index "$average_fusion_file" 'Timestamp')
	pre_idx=$(get_column_index "$average_fusion_file" 'Preprocessing')
	obj_int_idx=$(get_column_index "$average_fusion_file" 'Object integration')
	fusion_idx=$(get_column_index "$average_fusion_file" 'Total')
	plan_stamp_idx=$(get_column_index "$average_planning_file" 'Timestamp')
	plan_time_idx=$(get_column_index "$average_planning_file" 'Planning time')
	# Plot the data.
	gnuplot -p -e "
	$save_command
	set xlabel 'Time (s)';
	set ylabel 'Frame time (s)';
	set key right top;
	set grid;
	set style data lines;
	set xrange [$xmin:$xmax];
	set yrange [$ymin:$ymax];
	fusion_files = \"$fusion_files\";
	planning_files = \"$planning_files\";
	plot for [i=$pre_idx:$obj_int_idx:1] \
		'$average_fusion_file' using $stamp_idx:(sum [col=i:$obj_int_idx] column(col)) title columnheader(i) with filledcurves x1,\
		'$average_fusion_file' using $stamp_idx:(\$$fusion_idx) title 'Total',\
		'$average_planning_file' using $plan_stamp_idx:$plan_time_idx title 'Planning' with points linetype rgb 'red' linewidth 3;
	"
	# Remove temporary files.
	rm -f "$average_planning_file"
	rm -f "$average_fusion_file"
}

# Usage: utility LOGDIR...
utility() {
	planning_files=$(log_files 'stats_planning.tsv' "$@")
	if [ -z "$planning_files" ]
	then
		return
	fi
	# Average all runs.
	average_planning_file=$(mktemp) || exit 1
	get_average_data $planning_files > "$average_planning_file"
	# Get the indices of the required columns.
	plan_idx=$(get_column_index "$average_planning_file" 'Planning iteration')
	combined_idx=$(get_column_index "$average_planning_file" 'Goal utility')
	exploration_idx=$(get_column_index "$average_planning_file" 'Goal entropy utility')
	object_dist_idx=$(get_column_index "$average_planning_file" 'Goal object dist utility')
	object_compl_idx=$(get_column_index "$average_planning_file" 'Goal object compl utility')
	# Plot the data.
	gnuplot -p -e "
	$save_command
	set xlabel 'Planning iteration';
	set ylabel 'Utility (1/s)';
	set grid;
	set style data lines;
	set xrange [$xmin:$xmax];
	set yrange [-0.2:$ymax];
	planning_files = \"$planning_files\";
	plot for [f in planning_files] f using (\$$plan_idx+1):$combined_idx notitle linetype rgb 'light-green' dashtype \".\",\
		for [f in planning_files] f using (\$$plan_idx+1):$exploration_idx notitle linetype rgb 'sandybrown' dashtype \".\",\
		for [f in planning_files] f using (\$$plan_idx+1):$object_dist_idx notitle linetype rgb 'brown4' dashtype \".\",\
		for [f in planning_files] f using (\$$plan_idx+1):$object_compl_idx notitle linetype rgb 'dark-violet' dashtype \".\",\
		'$average_planning_file' using (\$$plan_idx+1):$combined_idx title 'Utility' linetype rgb 'light-green' linewidth 3,\
		'$average_planning_file' using (\$$plan_idx+1):$exploration_idx title 'Exploration utility' linetype rgb 'sandybrown' linewidth 3,\
		'$average_planning_file' using (\$$plan_idx+1):$object_dist_idx title 'Object dist utility' linetype rgb 'brown4' linewidth 3,\
		'$average_planning_file' using (\$$plan_idx+1):$object_compl_idx title 'Object compl utility' linetype rgb 'dark-violet' linewidth 3;
	"
	# Remove temporary files.
	rm -f "$average_planning_file"
}

# Usage: gain LOGDIR...
gain() {
	planning_files=$(log_files 'stats_planning.tsv' "$@")
	if [ -z "$planning_files" ]
	then
		return
	fi
	# Average all runs.
	average_planning_file=$(mktemp) || exit 1
	get_average_data $planning_files > "$average_planning_file"
	# Get the indices of the required columns.
	plan_idx=$(get_column_index "$average_planning_file" 'Planning iteration')
	entropy_idx=$(get_column_index "$average_planning_file" 'Goal entropy gain')
	dist_idx=$(get_column_index "$average_planning_file" 'Goal object dist gain')
	compl_idx=$(get_column_index "$average_planning_file" 'Goal object compl gain')
	# Plot the data.
	gnuplot -p -e "
	$save_command
	set xlabel 'Planning iteration';
	set ylabel 'Gain';
	set grid;
	set style data lines;
	set xrange [$xmin:$xmax];
	set yrange [-0.2:1.2];
	planning_files = \"$planning_files\";
	plot for [f in planning_files] f using (\$$plan_idx+1):$entropy_idx notitle linetype rgb 'light-green' dashtype \".\",\
		for [f in planning_files] f using (\$$plan_idx+1):$dist_idx notitle linetype rgb 'brown4' dashtype \".\",\
		for [f in planning_files] f using (\$$plan_idx+1):$compl_idx notitle linetype rgb 'dark-violet' dashtype \".\",\
		'$average_planning_file' using (\$$plan_idx+1):$entropy_idx title 'Entropy gain' linetype rgb 'light-green' linewidth 3,\
		'$average_planning_file' using (\$$plan_idx+1):$dist_idx title 'Dist gain' linetype rgb 'brown4' linewidth 3,\
		'$average_planning_file' using (\$$plan_idx+1):$compl_idx title 'Compl gain' linetype rgb 'dark-violet' linewidth 3;
	"
	# Remove temporary files.
	rm -f "$average_planning_file"
}

# Usage: dominant_gain LOGDIR...
dominant_gain() {
	planning_files=$(log_files 'stats_planning.tsv' "$@")
	if [ -z "$planning_files" ]
	then
		return
	fi
	# Average all runs.
	average_planning_file=$(mktemp) || exit 1
	get_average_data $planning_files > "$average_planning_file"
	# Get the indices of the required columns.
	plan_idx=$(get_column_index "$average_planning_file" 'Planning iteration')
	dom_idx=$(get_column_index "$average_planning_file" 'Exploration dominant')
	# Plot the data.
	gnuplot -p -e "
	$save_command
	set xlabel 'Planning iteration';
	set ylabel 'Dominant gain';
	set grid;
	set style data lines;
	set xrange [$xmin:$xmax];
	set yrange [-0.2:1.2];
	set ytics ('Object' 0, 'Exploration' 1);
	planning_files = \"$planning_files\";
	plot for [f in planning_files] f using (\$$plan_idx+1):$dom_idx notitle linetype rgb 'light-green' dashtype \".\",\
		'$average_planning_file' using (\$$plan_idx+1):$dom_idx title 'Entropy gain' linetype rgb 'light-green' linewidth 3;
	"
	# Remove temporary files.
	rm -f "$average_planning_file"
}

# Usage: objects LOGDIR...
objects() {
	objects_files=$(log_files 'stats_objects.tsv' "$@")
	if [ -z "$objects_files" ]
	then
		return
	fi
	# Average all runs.
	average_objects_file=$(mktemp) || exit 1
	get_average_data $objects_files > "$average_objects_file"
	# Get the indices of the required columns.
	frame_idx=$(get_column_index "$average_objects_file" 'Frame')
	completeness_idx=$(get_column_index "$average_objects_file" 'Completeness (%)')
	desired_dist_idx=$(get_column_index "$average_objects_file" 'Desired observed dist (%)')
	objects_idx=$(get_column_index "$average_objects_file" 'Objects found (%)')
	# Plot the data.
	gnuplot -p -e "
	$save_command
	set xlabel 'Frame';
	set ylabel '(%)';
	set key right bottom;
	set grid;
	set style data lines;
	set xrange [$xmin:$xmax];
	set yrange [0:100];
	objects_files = \"$objects_files\";
	plot for [f in objects_files] f using $frame_idx:$completeness_idx notitle linetype rgb 'blue' dashtype \".\",\
		for [f in objects_files] f using $frame_idx:$desired_dist_idx notitle linetype rgb 'red' dashtype \".\",\
		for [f in objects_files] f using $frame_idx:$objects_idx notitle linetype rgb 'green' dashtype \".\",\
		'$average_objects_file' using $frame_idx:$completeness_idx title 'Completeness' linetype rgb 'blue' linewidth 3,\
		'$average_objects_file' using $frame_idx:$desired_dist_idx title 'Desired observed dist' linetype rgb 'red' linewidth 3,\
		'$average_objects_file' using $frame_idx:$objects_idx title 'Objects found' linetype rgb 'green' linewidth 3,;
	"
	# Remove temporary file.
	rm -f "$average_objects_file"
}

# Usage: objects_acc LOGDIR...
objects_acc() {
	objects_files=$(log_files 'stats_objects.tsv' "$@")
	if [ -z "$objects_files" ]
	then
		return
	fi
	# Average all runs.
	average_objects_file=$(mktemp) || exit 1
	get_average_data $objects_files > "$average_objects_file"
	# Get the indices of the required columns.
	frame_idx=$(get_column_index "$average_objects_file" 'Frame')
	accuracy_idx=$(get_column_index "$average_objects_file" 'Accuracy (m)')
	# Plot the data.
	gnuplot -p -e "
	$save_command
	set xlabel 'Frame';
	set ylabel 'Accuracy (m)';
	set key right bottom;
	set grid;
	set style data lines;
	set xrange [$xmin:$xmax];
	set yrange [$ymin:$ymax];
	objects_files = \"$objects_files\";
	plot for [f in objects_files] f using $frame_idx:$accuracy_idx notitle linetype rgb 'blue' dashtype \".\",\
		'$average_objects_file' using $frame_idx:$accuracy_idx notitle linetype rgb 'blue' linewidth 3;
	"
	# Remove temporary file.
	rm -f "$average_objects_file"
}

# Usage: objects_dist LOGDIR...
objects_dist() {
	objects_files=$(log_files 'stats_objects.tsv' "$@")
	if [ -z "$objects_files" ]
	then
		return
	fi
	# Average all runs.
	average_objects_file=$(mktemp) || exit 1
	get_average_data $objects_files > "$average_objects_file"
	# Get the indices of the required columns.
	frame_idx=$(get_column_index "$average_objects_file" 'Frame')
	mean_dist_idx=$(get_column_index "$average_objects_file" 'Mean observed dist (m)')
	# Plot the data.
	gnuplot -p -e "
	$save_command
	set xlabel 'Frame';
	set ylabel 'Mean observed distance (m)';
	set key right bottom;
	set grid;
	set style data lines;
	set xrange [$xmin:$xmax];
	set yrange [$ymin:$ymax];
	objects_files = \"$objects_files\";
	plot for [f in objects_files] f using $frame_idx:$mean_dist_idx notitle linetype rgb 'blue' dashtype \".\",\
		'$average_objects_file' using $frame_idx:$mean_dist_idx notitle linetype rgb 'blue' linewidth 3;
	"
	# Remove temporary file.
	rm -f "$average_objects_file"
}



# Parse command line options.
xmin='*'
ymin='*'
xmax='*'
ymax='*'
save_command=''
while getopts 'o:x:y:X:Y:h' opt_name
do
	case "$opt_name" in
		o)
			save_command="set terminal png size 1920,1080; set output '$OPTARG';"
			;;
		x)
			xmin="$OPTARG"
			;;
		y)
			ymin="$OPTARG"
			;;
		X)
			xmax="$OPTARG"
			;;
		Y)
			ymax="$OPTARG"
			;;
		h)
			usage
			exit 0
			;;
		*)
			usage
			exit 1
			;;
	esac
done
shift "$((OPTIND - 1))"

case "$#" in
	0|1)
		usage
		exit 2
		;;
	*)
		type="$1"
		shift
		"$type" "$@"
		;;
esac

