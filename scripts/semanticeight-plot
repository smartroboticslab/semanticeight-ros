#!/bin/sh
# NOTES
# * The volume plot x-axis is time, not iteration number, so it makes sense
#   that the average does not extend all the way to the shortest data line.
set -eu

# Usage: get_data_tsv LOGFILE
# It assumes that the lines for each frame are encountered in a specific order.
get_data_tsv() {
	awk 'BEGIN { OFS = "\t"; print "Frame", "Time", "Matching", "Preprocessing", "Tracking", "Integration", "Object integration", "Free volume", "Occupied volume", "Explored volume"}
		# Initialize the starting timestamp from the matching data
		/Matching/ {
			if (start_t == 0)
				start_t = $1
			printf "%d\t%s\t", frame++, ($1 - start_t)
		}
		# Just print the data column
		/(Matching|Preprocessing|Tracking|Integration|Object integration|Free volume:|Occupied volume:|Explored volume:)[[:space:]]+[0-9]/ {
			printf "%f\t", $(NF-1)
		}
		# End the line
		/Explored volume/ { printf "\n" }' "$1"
}

# Usage: get_planning_data_tsv LOGFILE
get_planning_data_tsv() {
	awk 'BEGIN { OFS = "\t"; print "Planning iteration", "Time", "Planning" }
		/Planning[[:space:]]+[0-9]/ {
			if (start_t == 0)
				start_t = $1
			print iteration++, ($1 - start_t), $(NF-1)
		}' "$1"
}

# Usage: get_average_data LOGFILE...
get_average_data() {
	# Sort the lines of all files so that lines for the same frame are
	# groupped together.
	sort -n "$@" | awk '
		function print_frame_data(frame, data_sum) {
			printf "%d", frame
			for (i in data_sum) { printf "\t%f", data_sum[i]/'"$#"' }
			printf "\n"
		}
		# Print the first header line found and ignore the rest
		/^[^[:digit:]]/ { if (!header) { print; header = 1 } }
		/^[[:digit:]]/ {
			# We have found data for a new frame, print the
			# previous frame data. prev_frame is initialized to 0
			# so this is not entered at first.
			if (prev_frame != $1) {
				# Exit if not all files had data for the previous frame.
				if (n != '"$#"') { exit 0 }
				# Print the averaged data of the previous frame.
				print_frame_data(prev_frame, s)
				# Reset the data for the new frame.
				for (i in s) { s[i] = 0 } n = 0
			}
			# Accumulate the data except the frame number and count
			# how many files have data for this frame.
			for (i = 2; i <= NF; i++) { s[i] += $i } n++
			prev_frame = $1
		}
		END {
			# Exit if not all files had data for the previous frame.
			if (n != '"$#"') { exit 0 }
			# Print the averaged data of the previous frame.
			print_frame_data(prev_frame, s)
		}'
}

plot_data() {
	data_files=""
	planning_files=""
	# Iterate over each run/log
	while [ "$#" -gt 0 ]; do
		# Extract the frame integration data
		t=$(mktemp) || exit 1
		data_files="$data_files	$t"
		get_data_tsv "$1" > "$t"
		# Extract the planning data
		t=$(mktemp) || exit 1
		planning_files="$planning_files	$t"
		get_planning_data_tsv "$1" > "$t"
		shift
	done
	# Average all runs
	average_data_file=$(mktemp) || exit 1
	get_average_data $data_files > "$average_data_file"
	average_planning_file=$(mktemp) || exit 1
	get_average_data $planning_files > "$average_planning_file"

	# Plot the data.
	gnuplot -p -e "
	$save_command
	data_files = \"$data_files\";
	planning_files = \"$planning_files\";
	set grid;
	set style data lines;
	set multiplot layout 2,2;

	set key right bottom;
	set xlabel 'Time (s)';
	set ylabel 'Volume (m³)';
	plot for [f in data_files] f using 2:8 notitle linetype rgb 'blue' dashtype \".\",\
		for [f in data_files] f using 2:9 notitle linetype rgb 'red' dashtype \".\",\
		'$average_data_file' using 2:8 title 'Free' linetype rgb 'blue' linewidth 3,\
		'$average_data_file' using 2:9 title 'Occupied' linetype rgb 'red' linewidth 3,;

	set key right bottom;
	set xlabel 'Frame';
	set ylabel 'Volume (m³)';
	plot for [f in data_files] f using (\$1+1):8 notitle linetype rgb 'blue' dashtype \".\",\
		for [f in data_files] f using (\$1+1):9 notitle linetype rgb 'red' dashtype \".\",\
		'$average_data_file' using (\$1+1):8 title 'Free' linetype rgb 'blue' linewidth 3,\
		'$average_data_file' using (\$1+1):9 title 'Occupied' linetype rgb 'red' linewidth 3,;


	set xlabel 'Planning iteration';
	set ylabel 'Planning time (s)';
	plot for [f in planning_files] f using (\$1+1):3 notitle linetype rgb 'blue' dashtype \".\",\
		'$average_planning_file' using (\$1+1):3 notitle linetype rgb 'blue' linewidth 3;

	set key right top;
	set xlabel 'Frame';
	set ylabel 'Frame time (s)';
	plot for [i=3:7:1] \
		'$average_data_file' using (\$1+1):(sum [col=i:7] column(col)) title columnheader(i) with filledcurves x1;

	unset multiplot;"

	if [ "$extra_plots" -eq 1 ]; then
		gnuplot -p -e "
		data_files = \"$data_files\";
		planning_files = \"$planning_files\";
		set grid;
		set style data lines;

		set key right top;
		set xlabel 'Time (s)';
		set ylabel 'Frame time (s)';
		plot for [i=3:6:1] \
			'$average_data_file' using 2:(sum [col=i:6] column(col)) title columnheader(i) with filledcurves x1,\
			'$average_planning_file' using 2:3 title 'Planning' with points linetype rgb 'red' linewidth 3;
		"
	fi

	# Remove temporary files.
	rm -f "$average_planning_file"
	rm -f "$average_data_file"
	for t in $planning_files; do
		rm -f "$t"
	done
	for t in $data_files; do
		rm -f "$t"
	done
}

usage() {
	printf 'Usage: %s [rosout.log]...\n' "$(basename "$0")"
	grep -E '[[:space:]].) #' "$0" | sed -e 's/) #//g' -e 's/^[ \t]*/  -/g'
}



# Parse command line options.
extra_plots=0
save_command=''
while getopts 'eo:h' opt_name; do
	case "$opt_name" in
		e) #      Display extra plots
			extra_plots=1
			;;
		o) #=FILE Save to FILE instead of displaying
			save_command="set terminal png size 1920,1080; set output '$OPTARG';"
			;;
		h) #      Display this help message
			usage
			exit 0
			;;
		*)
			usage
			exit 1
			;;
	esac
done
shift "$((OPTIND - 1))"

case "$#" in
	0)
		usage
		exit 2
		;;
	*)
		plot_data "$@"
		;;
esac

