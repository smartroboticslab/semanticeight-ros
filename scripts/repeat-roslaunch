#!/bin/sh
set -eu

script_dir() {
	dirname "$0"
}

sequence_name() {
	log_file="$1"/log
	if [ -r "$log_file" ]
	then
		grep -F 'sequence_name:' "$log_file" | head -n 1 | sed 's/^.*:  *//g'
	fi
}

# Usage: store_run_data OUTDIR INDEX
store_run_data() {
	# Resolve the symlink to the latest log directory.
	log_dir=$(readlink -f "$HOME/.ros/log/latest")
	# Store the log directory in OUTDIR prefixed with the run index.
	outdir=$(printf '%s/%03d_%s' "$1" "$2" "$(basename "$log_dir")")
	mkdir -p "$1"
	mv "$log_dir" "$outdir"
	printf '%s\n' "$outdir"
}

generate_run_montage() {
	render_dir="$1"/renders
	if [ -d "$render_dir" ]
	then
		printf 'Generating render montage...\n'
		"$(script_dir)"/../semanticeight/se_tools/semanticeight_render_montage.sh "$render_dir" && rm -rf "$render_dir"
	else
		printf 'Skipping render montage, %s is not a directory\n' "$render_dir"
	fi
}

evaluate_object_meshes() {
	sequence=$(sequence_name "$1")
	mesh_dir="$1"/meshes
	gt_mesh_dir="$HOME/Documents/Datasets/gt_meshes/$sequence"
	exe="$(script_dir)"/../../mesh_diff_tool/build/compareMultiple
	if [ -z "$sequence" ]
	then
		printf 'Skipping mesh evaluation, sequence name is empty\n'
		return
	fi
	if ! [ -d "$mesh_dir" ]
	then
		printf 'Skipping mesh evaluation, %s is not a directory\n' "$mesh_dir"
		return
	fi
	if ! [ -d "$gt_mesh_dir" ]
	then
		printf 'Skipping mesh evaluation, %s is not a directory\n' "$gt_mesh_dir"
		return
	fi
	if [ -x "$exe" ]
	then
		printf 'Evaluating meshes...\n'
		"$exe" "$mesh_dir" "$gt_mesh_dir" > "$mesh_dir"/mesh_comparison.log
	else
		printf 'Skipping mesh evaluation, %s is not an executable\n' "$exe"
	fi
}



if [ "$#" -lt 2 ]
then
	printf 'Usage: %s NUM LAUNCH_FILE [ARG]...\n' "$(basename "$0")"
	exit 2
fi

dir="$HOME/semanticeight_logs_$(date '+%Y%m%d_%H%M%S')"
n="$1"
shift

# Run the command n times and save the logs.
i=1
while [ "$i" -le "$n" ]
do
	printf 'Run %d/%d\n' "$i" "$n"
	tmp_log=$(mktemp)
	roslaunch supereight_ros "$@" 2>&1 | tee "$tmp_log"
	run_dir=$(store_run_data "$dir" "$i" "$1")
	mv "$tmp_log" "$run_dir"/log
	evaluate_object_meshes "$run_dir"
	"$(script_dir)"/generate-plots "$run_dir"/plots "$run_dir"/logs
	generate_run_montage "$run_dir"
	i=$((i+1))
done

"$(script_dir)"/generate-plots "$dir"/plots "$dir"/*/logs

